# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rails_admin/all/rails_admin.rbi
#
# rails_admin-2.2.1

module RailsAdmin
  def self.add_extension(extension_key, extension_definition, options = nil); end
  def self.config(entity = nil, &block); end
  def self.railtie_helpers_paths; end
  def self.railtie_namespace; end
  def self.railtie_routes_url_helpers(include_path_helpers = nil); end
  def self.setup_all_extensions; end
  def self.table_name_prefix; end
  def self.use_relative_model_naming?; end
  def self.yaml_dump(object); end
  def self.yaml_load(yaml); end
end
class RailsAdmin::Engine < Rails::Engine
end
module Anonymous_Module_59
end
module Anonymous_Module_60
end
module RailsAdmin::Support
end
module RailsAdmin::Support::I18n
  def abbr_day_names; end
  def abbr_month_names; end
  def date_format; end
  def day_names; end
  def month_names; end
end
class RailsAdmin::Support::Datetime
  def delocalize(value); end
  def initialize(strftime_format); end
  def parse_string(value); end
  def self.delocalize(date_string, format); end
  def self.normalize(date_string, format); end
  def self.parse_date_string(date_string); end
  def strftime_format; end
  def to_momentjs; end
end
class RailsAdmin::AbstractModel
  def adapter; end
  def all; end
  def all=(obj); end
  def config; end
  def each_associated_children(object); end
  def initialize(model_or_model_name); end
  def initialize_active_record; end
  def initialize_mongoid; end
  def model; end
  def model_name; end
  def param_key; end
  def parse_field_value(field, value); end
  def pretty_name; end
  def self.all(adapter = nil); end
  def self.all=(obj); end
  def self.new(m); end
  def self.old_new(*arg0); end
  def self.polymorphic_parents(adapter, model_name, name); end
  def self.reset; end
  def self.reset_polymorphic_parents; end
  def to_param; end
  def to_s; end
  def where(conditions); end
end
class RailsAdmin::AbstractModel::StatementBuilder
  def build_statement_for_date; end
  def build_statement_for_datetime_or_timestamp; end
  def build_statement_for_integer_decimal_or_float; end
  def build_statement_for_type; end
  def build_statement_for_type_generic; end
  def get_filtering_duration; end
  def initialize(column, type, value, operator); end
  def range_filter(_min, _max); end
  def to_statement; end
  def unary_operators; end
end
class RailsAdmin::AbstractModel::StatementBuilder::FilteringDuration
  def between; end
  def default; end
  def default_date; end
  def get_duration; end
  def initialize(operator, value); end
  def last_week; end
  def this_week; end
  def today; end
  def yesterday; end
end
module RailsAdmin::Config
  def self.actions(&block); end
  def self.audit_with(*args, &block); end
  def self.authenticate_with(&blk); end
  def self.authorize_with(*args, &block); end
  def self.browser_validations; end
  def self.browser_validations=(arg0); end
  def self.compact_show_view; end
  def self.compact_show_view=(arg0); end
  def self.configure_with(extension); end
  def self.current_user_method(&block); end
  def self.default_associated_collection_limit; end
  def self.default_associated_collection_limit=(arg0); end
  def self.default_hidden_fields; end
  def self.default_hidden_fields=(fields); end
  def self.default_items_per_page; end
  def self.default_items_per_page=(arg0); end
  def self.default_search_operator; end
  def self.default_search_operator=(operator); end
  def self.excluded_models; end
  def self.excluded_models=(arg0); end
  def self.forgery_protection_settings; end
  def self.forgery_protection_settings=(arg0); end
  def self.included_models; end
  def self.included_models=(arg0); end
  def self.label_methods; end
  def self.label_methods=(arg0); end
  def self.lchomp(base, arg); end
  def self.main_app_name; end
  def self.main_app_name=(arg0); end
  def self.model(entity, &block); end
  def self.models; end
  def self.models_pool; end
  def self.navigation_static_label; end
  def self.navigation_static_label=(arg0); end
  def self.navigation_static_links; end
  def self.navigation_static_links=(arg0); end
  def self.parent_controller; end
  def self.parent_controller=(arg0); end
  def self.registry; end
  def self.reset; end
  def self.reset_all_models; end
  def self.reset_model(model); end
  def self.show_gravatar; end
  def self.show_gravatar=(arg0); end
  def self.sidescroll; end
  def self.sidescroll=(arg0); end
  def self.total_columns_width; end
  def self.total_columns_width=(arg0); end
  def self.viable_models; end
  def self.visible_models(bindings); end
  def self.visible_models_with_bindings(bindings); end
end
module RailsAdmin::Config::Proxyable
  def bindings; end
  def bindings=(new_bindings); end
  def with(bindings = nil); end
end
class RailsAdmin::Config::Proxyable::Proxy < BasicObject
  def bind(key, value = nil); end
  def initialize(object, bindings = nil); end
  def method_missing(method_name, *args, &block); end
end
module RailsAdmin::Config::Configurable
  def has_option?(name); end
  def register_deprecated_instance_option(option_name, replacement_option_name = nil, &custom_error); end
  def register_instance_option(option_name, &default); end
  def self.included(base); end
  def with_recurring(option_name, value_proc, default_proc); end
end
module RailsAdmin::Config::Configurable::ClassMethods
  def register_class_option(option_name, &default); end
  def register_deprecated_instance_option(option_name, replacement_option_name = nil, scope = nil); end
  def register_instance_option(option_name, scope = nil, &default); end
end
module RailsAdmin::Config::Hideable
  def hidden?; end
  def hide(&block); end
  def self.included(klass); end
  def show(&block); end
end
module RailsAdmin::Config::Fields
  def default_factory; end
  def self.default_factory; end
  def self.factory(parent); end
  def self.register_factory(&block); end
end
class RailsAdmin::Config::Fields::Group
  def abstract_model; end
  def active(*args, &block); end
  def active?; end
  def field(name, type = nil, &block); end
  def fields; end
  def fields_of_type(type, &block); end
  def help(*args, &block); end
  def initialize(parent, name); end
  def label(*args, &block); end
  def name; end
  def parent; end
  def root; end
  def section; end
  def section=(arg0); end
  def visible(*args, &block); end
  def visible?; end
  def visible_fields; end
  extend RailsAdmin::Config::Configurable::ClassMethods
  include RailsAdmin::Config::Configurable
  include RailsAdmin::Config::Hideable
  include RailsAdmin::Config::Proxyable
end
module RailsAdmin::Config::HasGroups
  def group(name, &block); end
  def visible_groups; end
end
module RailsAdmin::Config::Groupable
  def group(name = nil); end
end
module RailsAdmin::Config::Inspectable
  def inspect; end
  def instance_variable_name(variable); end
  def set_named_instance_variables; end
end
class RailsAdmin::Config::Fields::Base
  def abstract_model; end
  def active(*args, &block); end
  def active?; end
  def allowed_methods(*args, &block); end
  def association?; end
  def children_fields(*args, &block); end
  def column_width(*args, &block); end
  def css_class(*args, &block); end
  def default_filter_operator(*args, &block); end
  def default_value(*args, &block); end
  def defined; end
  def defined=(arg0); end
  def editable?; end
  def errors; end
  def export_value(*args, &block); end
  def filterable(*args, &block); end
  def filterable?; end
  def form_default_value; end
  def form_value; end
  def formatted_value(*args, &block); end
  def generic_field_help; end
  def generic_help; end
  def help(*args, &block); end
  def hint(*args, &block); end
  def html_attributes(*args, &block); end
  def initialize(parent, name, properties); end
  def inverse_of; end
  def label(*args, &block); end
  def length(*args, &block); end
  def method_name; end
  def name; end
  def nested_form(*args, &block); end
  def optional(state = nil, &block); end
  def optional=(state); end
  def optional?; end
  def order; end
  def order=(arg0); end
  def parent; end
  def parse_input(_params); end
  def parse_value(value); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
  def properties; end
  def queryable(*args, &block); end
  def queryable?; end
  def read_only(*args, &block); end
  def read_only?; end
  def render(*args, &block); end
  def required(*args, &block); end
  def required?; end
  def root; end
  def search_operator(*args, &block); end
  def searchable(*args, &block); end
  def searchable_columns(*args, &block); end
  def section; end
  def section=(arg0); end
  def serial(*args, &block); end
  def serial?; end
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
  def sortable(*args, &block); end
  def type; end
  def type_css_class; end
  def valid_length(*args, &block); end
  def value; end
  def view_helper(*args, &block); end
  def virtual?; end
  def visible(*args, &block); end
  def visible?; end
  extend RailsAdmin::Config::Configurable::ClassMethods
  include RailsAdmin::Config::Configurable
  include RailsAdmin::Config::Groupable
  include RailsAdmin::Config::Hideable
  include RailsAdmin::Config::Inspectable
  include RailsAdmin::Config::Proxyable
end
class RailsAdmin::Config::Fields::Association < RailsAdmin::Config::Fields::Base
  def associated_collection_cache_all(*args, &block); end
  def associated_collection_scope(*args, &block); end
  def associated_model_config; end
  def associated_model_limit; end
  def associated_object_label_method; end
  def associated_primary_key; end
  def association; end
  def eager_load(*args, &block); end
  def eager_load?; end
  def foreign_key; end
  def inverse_of(*args, &block); end
  def label(*args, &block); end
  def multiple?; end
  def nested_form(*args, &block); end
  def polymorphic?; end
  def pretty_value(*args, &block); end
  def removable(*args, &block); end
  def removable?; end
  def self.inherited(klass); end
  def value; end
  def virtual?; end
  def visible(*args, &block); end
  def visible?; end
end
module RailsAdmin::Config::Fields::Types
  def self.load(type); end
  def self.register(type, klass = nil); end
end
class RailsAdmin::Config::Fields::Types::StringLike < RailsAdmin::Config::Fields::Base
  def parse_input(params); end
  def treat_empty_as_nil(*args, &block); end
  def treat_empty_as_nil?; end
end
class RailsAdmin::Config::Fields::Types::Text < RailsAdmin::Config::Fields::Types::StringLike
  def html_attributes(*args, &block); end
  def partial(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::ActionText < RailsAdmin::Config::Fields::Types::Text
  def css_location(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::String < RailsAdmin::Config::Fields::Types::StringLike
  def generic_help; end
  def html_attributes(*args, &block); end
  def input_size; end
  def partial(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Enum < RailsAdmin::Config::Fields::Base
  def enum(*args, &block); end
  def enum_method(*args, &block); end
  def multiple(*args, &block); end
  def multiple?; end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::ActiveRecordEnum < RailsAdmin::Config::Fields::Types::Enum
  def enum(*args, &block); end
  def form_value; end
  def multiple(*args, &block); end
  def multiple?; end
  def parse_input(params); end
  def parse_input_value(value); end
  def parse_value(value); end
  def pretty_value(*args, &block); end
  def queryable(*args, &block); end
  def type; end
  def type_cast_value(value); end
end
class RailsAdmin::Config::Fields::Types::FileUpload < RailsAdmin::Config::Fields::Base
  def allowed_methods(*args, &block); end
  def cache_method(*args, &block); end
  def cache_value(*args, &block); end
  def delete_method(*args, &block); end
  def export_value(*args, &block); end
  def html_attributes(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def link_name(*args, &block); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
  def resource_url; end
  def thumb_method(*args, &block); end
  def virtual?; end
end
class RailsAdmin::Config::Fields::Types::ActiveStorage < RailsAdmin::Config::Fields::Types::FileUpload
  def delete_method(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def resource_url(thumb = nil); end
  def thumb_method(*args, &block); end
  def value; end
end
class RailsAdmin::Config::Fields::Types::BelongsToAssociation < RailsAdmin::Config::Fields::Association
  def associated_primary_key; end
  def eager_load(*args, &block); end
  def eager_load?; end
  def formatted_value(*args, &block); end
  def inline_add(*args, &block); end
  def inline_edit(*args, &block); end
  def method_name; end
  def multiple?; end
  def partial(*args, &block); end
  def searchable(*args, &block); end
  def selected_id; end
  def sortable(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Boolean < RailsAdmin::Config::Fields::Base
  def export_value(*args, &block); end
  def generic_help; end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
  def view_helper(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::BsonObjectId < RailsAdmin::Config::Fields::Types::String
  def generic_help; end
  def label(*args, &block); end
  def parse_input(params); end
  def parse_value(value); end
  def read_only(*args, &block); end
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
end
class RailsAdmin::Config::Fields::Types::Datetime < RailsAdmin::Config::Fields::Base
  def date_format(*args, &block); end
  def datepicker_options(*args, &block); end
  def formatted_value(*args, &block); end
  def html_attributes(*args, &block); end
  def i18n_scope(*args, &block); end
  def parse_input(params); end
  def parse_value(value); end
  def parser; end
  def partial(*args, &block); end
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
  def strftime_format(*args, &block); end
  def value; end
end
class RailsAdmin::Config::Fields::Types::Date < RailsAdmin::Config::Fields::Types::Datetime
  def date_format(*args, &block); end
  def datepicker_options(*args, &block); end
  def html_attributes(*args, &block); end
  def i18n_scope(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Decimal < RailsAdmin::Config::Fields::Base
end
class RailsAdmin::Config::Fields::Types::Dragonfly < RailsAdmin::Config::Fields::Types::FileUpload
  def cache_method(*args, &block); end
  def delete_method(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def resource_url(thumb = nil); end
  def thumb_method(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Paperclip < RailsAdmin::Config::Fields::Types::FileUpload
  def delete_method(*args, &block); end
  def resource_url(thumb = nil); end
  def thumb_method(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Carrierwave < RailsAdmin::Config::Fields::Types::FileUpload
  def cache_method(*args, &block); end
  def delete_method(*args, &block); end
  def resource_url(thumb = nil); end
  def thumb_method(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::MultipleFileUpload < RailsAdmin::Config::Fields::Base
  def allowed_methods(*args, &block); end
  def attachment(&block); end
  def attachment_class(*args, &block); end
  def attachments; end
  def cache_method(*args, &block); end
  def delete_method(*args, &block); end
  def export_value(*args, &block); end
  def html_attributes(*args, &block); end
  def initialize(*args); end
  def keep_method(*args, &block); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
  def reorderable(*args, &block); end
  def reorderable?; end
  def virtual?; end
end
class RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  def delete_key(*args, &block); end
  def delete_value(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def initialize(value); end
  def keep_value(*args, &block); end
  def pretty_value(*args, &block); end
  def resource_url(_thumb = nil); end
  def thumb_method(*args, &block); end
  def value; end
  extend RailsAdmin::Config::Configurable::ClassMethods
  include RailsAdmin::Config::Configurable
  include RailsAdmin::Config::Proxyable
end
class RailsAdmin::Config::Fields::Types::MultipleActiveStorage < RailsAdmin::Config::Fields::Types::MultipleFileUpload
  def attachment_class(*args, &block); end
  def delete_method(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::MultipleActiveStorage::ActiveStorageAttachment < RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  def delete_value(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def resource_url(thumb = nil); end
  def thumb_method(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::MultipleCarrierwave < RailsAdmin::Config::Fields::Types::MultipleFileUpload
  def attachment_class(*args, &block); end
  def cache_method(*args, &block); end
  def delete_method(*args, &block); end
  def keep_method(*args, &block); end
  def reorderable(*args, &block); end
  def reorderable?; end
  def value; end
end
class RailsAdmin::Config::Fields::Types::MultipleCarrierwave::CarrierwaveAttachment < RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  def delete_value(*args, &block); end
  def keep_value(*args, &block); end
  def resource_url(thumb = nil); end
  def thumb_method(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Float < RailsAdmin::Config::Fields::Base
end
class RailsAdmin::Config::Fields::Types::HasManyAssociation < RailsAdmin::Config::Fields::Association
  def errors; end
  def inline_add(*args, &block); end
  def method_name; end
  def orderable(*args, &block); end
  def partial(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::HasAndBelongsToManyAssociation < RailsAdmin::Config::Fields::Types::HasManyAssociation
end
class RailsAdmin::Config::Fields::Types::HasOneAssociation < RailsAdmin::Config::Fields::Association
  def editable?; end
  def formatted_value(*args, &block); end
  def inline_add(*args, &block); end
  def inline_edit(*args, &block); end
  def method_name; end
  def multiple?; end
  def partial(*args, &block); end
  def selected_id; end
end
class RailsAdmin::Config::Fields::Types::Integer < RailsAdmin::Config::Fields::Base
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
  def view_helper(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Password < RailsAdmin::Config::Fields::Types::String
  def formatted_value(*args, &block); end
  def parse_input(params); end
  def pretty_value(*args, &block); end
  def value; end
  def view_helper(*args, &block); end
  def visible(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::PolymorphicAssociation < RailsAdmin::Config::Fields::Types::BelongsToAssociation
  def allowed_methods(*args, &block); end
  def associated_collection(type); end
  def associated_collection_cache_all(*args, &block); end
  def associated_collection_scope(*args, &block); end
  def associated_model_config; end
  def eager_load(*args, &block); end
  def eager_load?; end
  def formatted_value(*args, &block); end
  def parse_input(params); end
  def partial(*args, &block); end
  def polymorphic_type_collection; end
  def polymorphic_type_urls; end
  def searchable(*args, &block); end
  def sortable(*args, &block); end
  def value; end
  def visible(*args, &block); end
  def visible?; end
end
class RailsAdmin::Config::Fields::Types::Hidden < RailsAdmin::Config::Fields::Types::StringLike
  def generic_help; end
  def help(*args, &block); end
  def label(*args, &block); end
  def view_helper(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Serialized < RailsAdmin::Config::Fields::Types::Text
  def formatted_value(*args, &block); end
  def parse_input(params); end
  def parse_value(value); end
end
class RailsAdmin::Config::Fields::Types::Shrine < RailsAdmin::Config::Fields::Types::FileUpload
  def cache_method(*args, &block); end
  def cache_value(*args, &block); end
  def delete_method(*args, &block); end
  def link_name(*args, &block); end
  def resource_url(thumb = nil); end
  def thumb_method(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Time < RailsAdmin::Config::Fields::Types::Datetime
  def parse_value(value); end
  def strftime_format(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Timestamp < RailsAdmin::Config::Fields::Types::Datetime
end
class RailsAdmin::Config::Fields::Types::Color < RailsAdmin::Config::Fields::Types::StringLike
  def color(*args, &block); end
  def export_value(*args, &block); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::SimpleMDE < RailsAdmin::Config::Fields::Types::Text
  def css_location(*args, &block); end
  def instance_config(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::CKEditor < RailsAdmin::Config::Fields::Types::Text
  def base_location(*args, &block); end
  def config_js(*args, &block); end
  def location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::CodeMirror < RailsAdmin::Config::Fields::Types::Text
  def assets(*args, &block); end
  def config(*args, &block); end
  def css_location(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Wysihtml5 < RailsAdmin::Config::Fields::Types::Text
  def config_options(*args, &block); end
  def css_location(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Froala < RailsAdmin::Config::Fields::Types::Text
  def config_options(*args, &block); end
  def css_location(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Json < RailsAdmin::Config::Fields::Types::Text
  def export_value(*args, &block); end
  def formatted_value(*args, &block); end
  def parse_input(params); end
  def parse_value(value); end
  def pretty_value(*args, &block); end
end
class RailsAdmin::Config::Fields::Types::Inet < RailsAdmin::Config::Fields::Base
end
class RailsAdmin::Config::Fields::Types::Uuid < RailsAdmin::Config::Fields::Types::String
end
module RailsAdmin::Config::HasFields
  def _fields(readonly = nil); end
  def all_fields; end
  def configure(name, type = nil, &block); end
  def exclude_fields(*field_names, &block); end
  def exclude_fields_if(*field_names, &block); end
  def field(name, type = nil, add_to_section = nil, &block); end
  def fields(*field_names, &block); end
  def fields_of_type(type, &block); end
  def include_all_fields; end
  def include_fields(*field_names, &block); end
  def include_fields_if(*field_names, &block); end
  def visible_fields; end
end
module RailsAdmin::Config::HasDescription
  def desc(description, &_block); end
  def description; end
end
module RailsAdmin::Config::Sections
  def self.included(klass); end
end
class RailsAdmin::Config::Sections::Base
  def abstract_model; end
  def initialize(parent); end
  def parent; end
  def root; end
  extend RailsAdmin::Config::Configurable::ClassMethods
  include RailsAdmin::Config::Configurable
  include RailsAdmin::Config::HasDescription
  include RailsAdmin::Config::HasFields
  include RailsAdmin::Config::HasGroups
  include RailsAdmin::Config::Inspectable
  include RailsAdmin::Config::Proxyable
end
class RailsAdmin::Config::Sections::Edit < RailsAdmin::Config::Sections::Base
end
class RailsAdmin::Config::Sections::Update < RailsAdmin::Config::Sections::Edit
end
class RailsAdmin::Config::Sections::Create < RailsAdmin::Config::Sections::Edit
end
class RailsAdmin::Config::Sections::Nested < RailsAdmin::Config::Sections::Edit
end
class RailsAdmin::Config::Sections::Modal < RailsAdmin::Config::Sections::Edit
end
class RailsAdmin::Config::Sections::List < RailsAdmin::Config::Sections::Base
  def checkboxes(*args, &block); end
  def checkboxes?; end
  def filters(*args, &block); end
  def items_per_page(*args, &block); end
  def limited_pagination(*args, &block); end
  def row_css_class(*args, &block); end
  def scopes(*args, &block); end
  def search_by(*args, &block); end
  def sidescroll(*args, &block); end
  def sidescroll_frozen_columns; end
  def sort_by(*args, &block); end
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
end
class RailsAdmin::Config::Sections::Export < RailsAdmin::Config::Sections::Base
end
class RailsAdmin::Config::Sections::Show < RailsAdmin::Config::Sections::Base
end
module RailsAdmin::Config::Actions
  def self.add_action(key, parent_class, parent, &block); end
  def self.add_action_custom_key(action, &block); end
  def self.all(scope = nil, bindings = nil); end
  def self.bulk_delete(&block); end
  def self.collection(key, parent_class = nil, &block); end
  def self.dashboard(&block); end
  def self.delete(&block); end
  def self.edit(&block); end
  def self.export(&block); end
  def self.find(custom_key, bindings = nil); end
  def self.history_index(&block); end
  def self.history_show(&block); end
  def self.index(&block); end
  def self.init_actions!; end
  def self.member(key, parent_class = nil, &block); end
  def self.new(&block); end
  def self.register(name, klass = nil); end
  def self.reset; end
  def self.root(key, parent_class = nil, &block); end
  def self.show(&block); end
  def self.show_in_app(&block); end
end
class RailsAdmin::Config::Actions::Base
  def action_name(*args, &block); end
  def authorization_key(*args, &block); end
  def authorized(*args, &block); end
  def authorized?; end
  def breadcrumb_parent(*args, &block); end
  def bulkable(*args, &block); end
  def bulkable?; end
  def collection(*args, &block); end
  def collection?; end
  def controller(*args, &block); end
  def custom_key(*args, &block); end
  def enabled(*args, &block); end
  def enabled?; end
  def except(*args, &block); end
  def http_methods(*args, &block); end
  def i18n_key(*args, &block); end
  def key; end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def member?; end
  def only(*args, &block); end
  def pjax(*args, &block); end
  def pjax?; end
  def root(*args, &block); end
  def root?; end
  def route_fragment(*args, &block); end
  def self.key; end
  def show_in_menu(*args, &block); end
  def show_in_navigation(*args, &block); end
  def show_in_sidebar(*args, &block); end
  def sidebar_label(*args, &block); end
  def template_name(*args, &block); end
  def visible(*args, &block); end
  def visible?; end
  extend RailsAdmin::Config::Configurable::ClassMethods
  include RailsAdmin::Config::Configurable
  include RailsAdmin::Config::Hideable
  include RailsAdmin::Config::Proxyable
end
class RailsAdmin::Config::Actions::Dashboard < RailsAdmin::Config::Actions::Base
  def auditing_versions_limit(*args, &block); end
  def breadcrumb_parent(*args, &block); end
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def root(*args, &block); end
  def root?; end
  def route_fragment(*args, &block); end
  def statistics(*args, &block); end
  def statistics?; end
end
class RailsAdmin::Config::Actions::Index < RailsAdmin::Config::Actions::Base
  def breadcrumb_parent(*args, &block); end
  def collection(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
  def route_fragment(*args, &block); end
end
class RailsAdmin::Config::Actions::Show < RailsAdmin::Config::Actions::Base
  def breadcrumb_parent(*args, &block); end
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def route_fragment(*args, &block); end
end
class RailsAdmin::Config::Actions::ShowInApp < RailsAdmin::Config::Actions::Base
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def pjax(*args, &block); end
  def pjax?; end
  def visible(*args, &block); end
  def visible?; end
end
class RailsAdmin::Config::Actions::HistoryShow < RailsAdmin::Config::Actions::Base
  def authorization_key(*args, &block); end
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def route_fragment(*args, &block); end
  def template_name(*args, &block); end
end
class RailsAdmin::Config::Actions::HistoryIndex < RailsAdmin::Config::Actions::Base
  def authorization_key(*args, &block); end
  def collection(*args, &block); end
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def route_fragment(*args, &block); end
  def template_name(*args, &block); end
end
class RailsAdmin::Config::Actions::New < RailsAdmin::Config::Actions::Base
  def collection(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
end
class RailsAdmin::Config::Actions::Edit < RailsAdmin::Config::Actions::Base
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
end
class RailsAdmin::Config::Actions::Export < RailsAdmin::Config::Actions::Base
  def bulkable(*args, &block); end
  def bulkable?; end
  def collection(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
end
class RailsAdmin::Config::Actions::Delete < RailsAdmin::Config::Actions::Base
  def authorization_key(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def route_fragment(*args, &block); end
end
class RailsAdmin::Config::Actions::BulkDelete < RailsAdmin::Config::Actions::Base
  def authorization_key(*args, &block); end
  def bulkable(*args, &block); end
  def bulkable?; end
  def collection(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
end
class RailsAdmin::Config::Model
  def abstract_model; end
  def base(&block); end
  def create(&block); end
  def edit(&block); end
  def excluded?; end
  def export(&block); end
  def groups; end
  def groups=(arg0); end
  def initialize(entity); end
  def label(*args, &block); end
  def label_plural(*args, &block); end
  def list(&block); end
  def method_missing(method_name, *args, &block); end
  def modal(&block); end
  def navigation_icon(*args, &block); end
  def navigation_label(*args, &block); end
  def nested(&block); end
  def object_label; end
  def object_label_method(*args, &block); end
  def parent(*args, &block); end
  def pluralize(count); end
  def root; end
  def show(&block); end
  def update(&block); end
  def visible(*args, &block); end
  def visible?; end
  def weight(*args, &block); end
  extend RailsAdmin::Config::Configurable::ClassMethods
  include RailsAdmin::Config::Configurable
  include RailsAdmin::Config::Hideable
  include RailsAdmin::Config::Inspectable
  include RailsAdmin::Config::Proxyable
  include RailsAdmin::Config::Sections
end
class RailsAdmin::Config::LazyModel < BasicObject
  def add_deferred_block(&block); end
  def initialize(entity, &block); end
  def method_missing(method_name, *args, &block); end
  def respond_to?(method_name, include_private = nil); end
  def target; end
end
module RailsAdmin::Extensions
end
module RailsAdmin::Extensions::ControllerExtension
end
module RailsAdmin::Extensions::CanCanCan
end
class RailsAdmin::Extensions::CanCanCan::AuthorizationAdapter
  def attributes_for(action, abstract_model); end
  def authorize(action, abstract_model = nil, model_object = nil); end
  def authorized?(action, abstract_model = nil, model_object = nil); end
  def initialize(controller, ability = nil); end
  def query(action, abstract_model); end
  def resolve_action_and_subject(action, abstract_model, model_object); end
end
module RailsAdmin::Extensions::CanCanCan::AuthorizationAdapter::ControllerExtension
  def current_ability; end
end
module RailsAdmin::Extensions::Pundit
end
class RailsAdmin::Extensions::Pundit::AuthorizationAdapter
  def action_for_pundit(action); end
  def attributes_for(action, abstract_model); end
  def authorize(action, abstract_model = nil, model_object = nil); end
  def authorized?(action, abstract_model = nil, model_object = nil); end
  def initialize(controller); end
  def policy(record); end
  def query(_action, abstract_model); end
  def self.setup; end
end
module RailsAdmin::Extensions::PaperTrail
end
class RailsAdmin::Extensions::PaperTrail::VersionProxy
  def created_at; end
  def initialize(version, user_class = nil); end
  def item; end
  def message; end
  def table; end
  def username; end
end
module RailsAdmin::Extensions::PaperTrail::ControllerExtension
  def user_for_paper_trail; end
end
class RailsAdmin::Extensions::PaperTrail::AuditingAdapter
  def create_object(_object, _abstract_model, _user); end
  def delete_object(_object, _model, _user); end
  def initialize(controller, user_class = nil, version_class = nil); end
  def latest(count = nil); end
  def listing_for_model(model, query, sort, sort_reverse, all, page, per_page = nil); end
  def listing_for_model_or_object(model, object, query, sort, sort_reverse, all, page, per_page); end
  def listing_for_object(model, object, query, sort, sort_reverse, all, page, per_page = nil); end
  def self.setup; end
  def update_object(_object, _model, _user, _changes); end
  def version_class_for(model); end
  def versions_for_model(model); end
end
module RailsAdmin::Extensions::History
end
class RailsAdmin::Extensions::History::AuditingAdapter
  def create_object(object, model, user); end
  def delete_object(object, model, user); end
  def initialize(controller, user_class = nil); end
  def latest(count = nil); end
  def listing_for_model(model, query, sort, sort_reverse, all, page, per_page = nil); end
  def listing_for_object(model, object, query, sort, sort_reverse, all, page, per_page = nil); end
  def update_object(object, model, user, changes); end
end
class RailsAdmin::CSVConverter
  def association_for(key); end
  def export_fields_for(method, model_config = nil); end
  def generate_csv_header; end
  def generate_csv_row(object); end
  def generate_csv_string(options); end
  def initialize(objects = nil, schema = nil); end
  def to_csv(options = nil); end
end
class RailsAdmin::HashHelper
  def self.symbolize(obj); end
end
module Sass
end
module Sass::Script
end
module Sass::Script::Functions
  def ie_hex_str(color); end
end
module RailsAdmin::Bootstrap
  def self.asset_pipeline?; end
  def self.compass?; end
  def self.load!; end
  def self.rails?; end
  def self.register_compass_extension; end
end
class RailsAdmin::Bootstrap::FrameworkNotFound < StandardError
end
module RailsAdmin::ApplicationHelper
  def action(key, abstract_model = nil, object = nil); end
  def actions(scope = nil, abstract_model = nil, object = nil); end
  def authorized?(action_name, abstract_model = nil, object = nil); end
  def breadcrumb(action = nil, _acc = nil); end
  def bulk_menu(abstract_model = nil); end
  def capitalize_first_letter(wording); end
  def current_action?(action, abstract_model = nil, object = nil); end
  def edit_user_link; end
  def flash_alert_class(flash_key); end
  def logout_method; end
  def logout_path; end
  def main_navigation; end
  def menu_for(parent, abstract_model = nil, object = nil, only_icon = nil); end
  def navigation(nodes_stack, nodes, level = nil); end
  def root_navigation; end
  def static_navigation; end
  def wording_for(label, action = nil, abstract_model = nil, object = nil); end
  include RailsAdmin::Support::I18n
end
module RailsAdmin::MainHelper
  def filterable_fields; end
  def get_column_sets(properties); end
  def get_indicator(percent); end
  def ordered_filter_options; end
  def ordered_filters; end
  def rails_admin_form_for(*args, &block); end
end
class RailsAdmin::ModelNotFound < StandardError
end
class RailsAdmin::ObjectNotFound < StandardError
end
class RailsAdmin::ActionNotAllowed < StandardError
end
class RailsAdmin::ApplicationController < ActionController::Base
  def _audit!; end
  def _authenticate!; end
  def _authorize!; end
  def _current_user; end
  def _get_plugin_name; end
  def _layout(lookup_context, formats); end
  def abstract_model; end
  def authorization_adapter; end
  def get_model; end
  def get_object; end
  def model_config; end
  def object; end
  def rails_admin_controller?; end
  def self.__callbacks; end
  def self._helper_methods; end
  def self._helpers; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def self.rescue_handlers; end
  def to_model_name(param); end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_61
  include RailsAdmin::Extensions::ControllerExtension
end
module Anonymous_Module_61
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_59
  extend Anonymous_Module_60
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_59
  include Anonymous_Module_60
end
class RailsAdmin::MainController < RailsAdmin::ApplicationController
  def _layout(lookup_context, formats); end
  def back_or_index; end
  def bulk_action; end
  def bulk_delete; end
  def check_for_cancel; end
  def dashboard; end
  def delete; end
  def edit; end
  def export; end
  def get_association_scope_from_params; end
  def get_collection(model_config, scope, pagination); end
  def get_layout; end
  def get_sort_hash(model_config); end
  def handle_save_error(whereto = nil); end
  def index; end
  def list_entries(model_config = nil, auth_scope_key = nil, additional_scope = nil, pagination = nil); end
  def new; end
  def redirect_to_on_success; end
  def sanitize_params_for!(action, model_config = nil, target_params = nil); end
  def self.__callbacks; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self._wrapper_options; end
  def self.helpers_path; end
  def self.middleware_stack; end
  def show; end
  def show_in_app; end
  def visible_fields(action, model_config = nil); end
  extend ActionView::Helpers::SanitizeHelper::ClassMethods
  include ActionDispatch::Routing::UrlFor
  include ActionView::Helpers::SanitizeHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TextHelper
  include Anonymous_Module_62
  include RailsAdmin::ApplicationHelper
  include RailsAdmin::MainHelper
end
module Anonymous_Module_62
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_59
  extend Anonymous_Module_60
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_59
  include Anonymous_Module_60
end
class RailsAdmin::FormBuilder < ActionView::Helpers::FormBuilder
  def dom_id(field); end
  def dom_name(field); end
  def errors_for(field); end
  def field_for(field); end
  def field_wrapper_for(field, nested_in); end
  def fieldset_for(fieldset, nested_in); end
  def generate(options = nil); end
  def generator_action(action, nested); end
  def help_for(field); end
  def input_for(field); end
  def jquery_namespace(field); end
  def nested_field_association?(field, nested_in); end
  def object_infos; end
  def visible_groups(model_config, action); end
  def without_field_error_proc_added_div; end
  include NestedForm::BuilderMixin
  include RailsAdmin::ApplicationHelper
end
